# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import proxy_wasm_cli_pb2 as proxy__wasm__cli__pb2


class WasmHostStub(object):
    """The greeting service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListInstances = channel.unary_unary(
                '/proxy_wasm_cli.WasmHost/ListInstances',
                request_serializer=proxy__wasm__cli__pb2.WasmListInstanceRequest.SerializeToString,
                response_deserializer=proxy__wasm__cli__pb2.WasmListInstanceReply.FromString,
                )
        self.LaunchInstance = channel.unary_unary(
                '/proxy_wasm_cli.WasmHost/LaunchInstance',
                request_serializer=proxy__wasm__cli__pb2.WasmLaunchInstanceRequest.SerializeToString,
                response_deserializer=proxy__wasm__cli__pb2.WasmLaunchInstanceReply.FromString,
                )
        self.SendTraffic = channel.unary_unary(
                '/proxy_wasm_cli.WasmHost/SendTraffic',
                request_serializer=proxy__wasm__cli__pb2.WasmSendTrafficRequest.SerializeToString,
                response_deserializer=proxy__wasm__cli__pb2.WasmSendTrafficReply.FromString,
                )
        self.WasmSettings = channel.unary_unary(
                '/proxy_wasm_cli.WasmHost/WasmSettings',
                request_serializer=proxy__wasm__cli__pb2.WasmSettingsRequest.SerializeToString,
                response_deserializer=proxy__wasm__cli__pb2.WasmSettingsReply.FromString,
                )


class WasmHostServicer(object):
    """The greeting service definition.
    """

    def ListInstances(self, request, context):
        """Sends a greeting
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LaunchInstance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendTraffic(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WasmSettings(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WasmHostServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListInstances': grpc.unary_unary_rpc_method_handler(
                    servicer.ListInstances,
                    request_deserializer=proxy__wasm__cli__pb2.WasmListInstanceRequest.FromString,
                    response_serializer=proxy__wasm__cli__pb2.WasmListInstanceReply.SerializeToString,
            ),
            'LaunchInstance': grpc.unary_unary_rpc_method_handler(
                    servicer.LaunchInstance,
                    request_deserializer=proxy__wasm__cli__pb2.WasmLaunchInstanceRequest.FromString,
                    response_serializer=proxy__wasm__cli__pb2.WasmLaunchInstanceReply.SerializeToString,
            ),
            'SendTraffic': grpc.unary_unary_rpc_method_handler(
                    servicer.SendTraffic,
                    request_deserializer=proxy__wasm__cli__pb2.WasmSendTrafficRequest.FromString,
                    response_serializer=proxy__wasm__cli__pb2.WasmSendTrafficReply.SerializeToString,
            ),
            'WasmSettings': grpc.unary_unary_rpc_method_handler(
                    servicer.WasmSettings,
                    request_deserializer=proxy__wasm__cli__pb2.WasmSettingsRequest.FromString,
                    response_serializer=proxy__wasm__cli__pb2.WasmSettingsReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'proxy_wasm_cli.WasmHost', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class WasmHost(object):
    """The greeting service definition.
    """

    @staticmethod
    def ListInstances(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proxy_wasm_cli.WasmHost/ListInstances',
            proxy__wasm__cli__pb2.WasmListInstanceRequest.SerializeToString,
            proxy__wasm__cli__pb2.WasmListInstanceReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LaunchInstance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proxy_wasm_cli.WasmHost/LaunchInstance',
            proxy__wasm__cli__pb2.WasmLaunchInstanceRequest.SerializeToString,
            proxy__wasm__cli__pb2.WasmLaunchInstanceReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendTraffic(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proxy_wasm_cli.WasmHost/SendTraffic',
            proxy__wasm__cli__pb2.WasmSendTrafficRequest.SerializeToString,
            proxy__wasm__cli__pb2.WasmSendTrafficReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WasmSettings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proxy_wasm_cli.WasmHost/WasmSettings',
            proxy__wasm__cli__pb2.WasmSettingsRequest.SerializeToString,
            proxy__wasm__cli__pb2.WasmSettingsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
